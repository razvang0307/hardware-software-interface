"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[8867],{5680:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>f});var a=r(6540);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function t(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?t(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,a,i=function(e,n){if(null==e)return{};var r,a,i={},t=Object.keys(e);for(a=0;a<t.length;a++)r=t[a],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(a=0;a<t.length;a++)r=t[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=a.createContext({}),c=function(e){var n=a.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var r=e.components,i=e.mdxType,t=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=c(r),u=i,f=g["".concat(l,".").concat(u)]||g[u]||d[u]||t;return r?a.createElement(f,o(o({ref:n},p),{},{components:r})):a.createElement(f,o({ref:n},p))}));function f(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var t=r.length,o=new Array(t);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[g]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<t;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8582:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>t,metadata:()=>s,toc:()=>c});var a=r(8168),i=(r(6540),r(5680));const t={},o="Reverse engineering",s={unversionedId:"Lab 4 - Toolchain. GOTO/Toolchain for Reverse Engineering/Reading/README",id:"Lab 4 - Toolchain. GOTO/Toolchain for Reverse Engineering/Reading/README",title:"Reverse engineering",description:"Ghidra is a useful tool for investigating binaries and reverse engineering.",source:"@site/docs/Lab 4 - Toolchain. GOTO/Toolchain for Reverse Engineering/Reading/README.md",sourceDirName:"Lab 4 - Toolchain. GOTO/Toolchain for Reverse Engineering/Reading",slug:"/Lab 4 - Toolchain. GOTO/Toolchain for Reverse Engineering/Reading/",permalink:"/hardware-software-interface/Lab 4 - Toolchain. GOTO/Toolchain for Reverse Engineering/Reading/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Toolchain for Reverse Engineering",permalink:"/hardware-software-interface/Lab 4 - Toolchain. GOTO/Toolchain for Reverse Engineering/"},next:{title:"Guides",permalink:"/hardware-software-interface/Lab 4 - Toolchain. GOTO/Toolchain for Reverse Engineering/Guides/"}},l={},c=[{value:"Disassembly",id:"disassembly",level:2},{value:"Decompiling",id:"decompiling",level:2}],p={toc:c},g="wrapper";function d(e){let{components:n,...r}=e;return(0,i.yg)(g,(0,a.A)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"reverse-engineering"},"Reverse engineering"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Ghidra")," is a useful tool for investigating binaries and ",(0,i.yg)("inlineCode",{parentName:"p"},"reverse engineering"),"."),(0,i.yg)("h2",{id:"disassembly"},"Disassembly"),(0,i.yg)("p",null,"The disassembly process is used to obtain a file containing assembly code from a binary file.\nThis process is always possible because the machine code specific to the processor has a direct correspondence with the assembly code.\nFor example, the operation ",(0,i.yg)("inlineCode",{parentName:"p"},"add eax, 0x14"),", which adds 20 to the value in the eax register, is always represented using the binary code ",(0,i.yg)("inlineCode",{parentName:"p"},"83 c0 14"),"."),(0,i.yg)("h2",{id:"decompiling"},"Decompiling"),(0,i.yg)("p",null,"The Ghidra program can be used even for decompiling code.\nA decompiler can be used to obtain the source code in a (relatively) high-level language, which when compiled will produce an executable whose behavior will be the same as the original executable.\nIn comparison, a disassembler performs an exact translation of an executable program into assembly language because there is a 1:1 relationship between machine code and assembly language."))}d.isMDXComponent=!0}}]);