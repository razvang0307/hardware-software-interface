"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[6950],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>f});var r=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),g=i,f=d["".concat(l,".").concat(g)]||d[g]||u[g]||o;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4888:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(8168),i=(n(6540),n(5680));const o={},a="Floating Point Exception",s={unversionedId:"Lab 6 - Registers and Memory Addressing/Registers/Guides/Floating Point Exception/README",id:"Lab 6 - Registers and Memory Addressing/Registers/Guides/Floating Point Exception/README",title:"Floating Point Exception",description:"To follow this guide, you'll need to use the floatingpointexception.asm file located in the guides/floating-point-exception/support directory.",source:"@site/docs/Lab 6 - Registers and Memory Addressing/Registers/Guides/Floating Point Exception/README.md",sourceDirName:"Lab 6 - Registers and Memory Addressing/Registers/Guides/Floating Point Exception",slug:"/Lab 6 - Registers and Memory Addressing/Registers/Guides/Floating Point Exception/",permalink:"/hardware-software-interface/Lab 6 - Registers and Memory Addressing/Registers/Guides/Floating Point Exception/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Multiply and Divide",permalink:"/hardware-software-interface/Lab 6 - Registers and Memory Addressing/Registers/Guides/Multiply and Divide/"},next:{title:"Drills",permalink:"/hardware-software-interface/Lab 6 - Registers and Memory Addressing/Registers/Drills/"}},l={},p=[],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.yg)(d,(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"floating-point-exception"},"Floating Point Exception"),(0,i.yg)("p",null,"To follow this guide, you'll need to use the ",(0,i.yg)("inlineCode",{parentName:"p"},"floating_point_exception.asm")," file located in the ",(0,i.yg)("inlineCode",{parentName:"p"},"guides/floating-point-exception/support")," directory."),(0,i.yg)("p",null,"The program tries to perform division using an ",(0,i.yg)("inlineCode",{parentName:"p"},"8 bit")," operand, ",(0,i.yg)("inlineCode",{parentName:"p"},"bl"),", in this case the quotient should be in the range ","[0, 255]",".\nGiven that ",(0,i.yg)("inlineCode",{parentName:"p"},"ax")," is ",(0,i.yg)("inlineCode",{parentName:"p"},"22891")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"bl")," is ",(0,i.yg)("inlineCode",{parentName:"p"},"2"),", the result of the division would be out of the defined range.\nThus we will see a ",(0,i.yg)("inlineCode",{parentName:"p"},"Floating point exception")," after the division."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"Note"),": For a detailed description of the ",(0,i.yg)("inlineCode",{parentName:"p"},"div")," instruction check out the ",(0,i.yg)("a",{parentName:"p",href:"https://www.felixcloutier.com/x86/idiv"},"documentation"),".")))}u.isMDXComponent=!0}}]);