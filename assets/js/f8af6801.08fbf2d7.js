"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[691],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>d});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),y=r,d=c["".concat(l,".").concat(y)]||c[y]||g[y]||i;return n?a.createElement(d,o(o({ref:t},u),{},{components:n})):a.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},1993:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(8168),r=(n(6540),n(5680));const i={},o="First look at Assembly instructions",s={unversionedId:"Lab 5 - Introduction to Assembly Language/x86 Architecture Family/Guides/First look at assembly instructions/README",id:"Lab 5 - Introduction to Assembly Language/x86 Architecture Family/Guides/First look at assembly instructions/README",title:"First look at Assembly instructions",description:"To follow this guide, you will need to use the instructions.asm file located in the guides/instructions/support directory.",source:"@site/docs/Lab 5 - Introduction to Assembly Language/x86 Architecture Family/Guides/First look at assembly instructions/README.md",sourceDirName:"Lab 5 - Introduction to Assembly Language/x86 Architecture Family/Guides/First look at assembly instructions",slug:"/Lab 5 - Introduction to Assembly Language/x86 Architecture Family/Guides/First look at assembly instructions/",permalink:"/hardware-software-interface/Lab 5 - Introduction to Assembly Language/x86 Architecture Family/Guides/First look at assembly instructions/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Guides",permalink:"/hardware-software-interface/Lab 5 - Introduction to Assembly Language/x86 Architecture Family/Guides/"},next:{title:"Discovering Assembly",permalink:"/hardware-software-interface/Lab 5 - Introduction to Assembly Language/x86 Architecture Family/Guides/Discovering Assembly/"}},l={},p=[],u={toc:p},c="wrapper";function g(e){let{components:t,...i}=e;return(0,r.yg)(c,(0,a.A)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"first-look-at-assembly-instructions"},"First look at Assembly instructions"),(0,r.yg)("p",null,"To follow this guide, you will need to use the ",(0,r.yg)("inlineCode",{parentName:"p"},"instructions.asm")," file located in the ",(0,r.yg)("inlineCode",{parentName:"p"},"guides/instructions/support")," directory."),(0,r.yg)("p",null,"Diving right into the demo, we can see one of the most important instructions that helps us, programmers, work with the stack and that is ",(0,r.yg)("inlineCode",{parentName:"p"},"push"),".\nWe discussed what the ",(0,r.yg)("inlineCode",{parentName:"p"},"push")," instruction does in the ",(0,r.yg)("a",{parentName:"p",href:"/hardware-software-interface/Lab%205%20-%20Introduction%20to%20Assembly%20Language/x86%20Architecture%20Family/Reading/#data-movement-instructions"},"reading section"),".\nConsidering its call, we can understand that it takes the ",(0,r.yg)("inlineCode",{parentName:"p"},"0")," value(as a ",(0,r.yg)("inlineCode",{parentName:"p"},"DWORD"),", a number stored on ",(0,r.yg)("inlineCode",{parentName:"p"},"4"),' bytes) and moves it onto the "top" of the stack.'),(0,r.yg)("p",null,"That ",(0,r.yg)("inlineCode",{parentName:"p"},"push")," is followed by a new instruction:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-assembly"},"popf\n")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"IMPORTANT"),": The ",(0,r.yg)("inlineCode",{parentName:"p"},"popf")," instruction is used for setting, depending on how many bytes we pop from the stack(in our case, 4 bytes), the ",(0,r.yg)("inlineCode",{parentName:"p"},"EFLAGS")," register(setting the entire register when popping 4 bytes and only the 2 lower bytes of the register when popping 2 bytes).\nYou can read more about the ",(0,r.yg)("inlineCode",{parentName:"p"},"popf")," instruction ",(0,r.yg)("a",{parentName:"p",href:"https://www.felixcloutier.com/x86/popf:popfd:popfq"},"here")," and ",(0,r.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/FLAGS_register"},"here"),".")),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"EFLAGS Representation",src:n(7509).A})),(0,r.yg)("p",null,"Having in mind what the ",(0,r.yg)("inlineCode",{parentName:"p"},"popf")," instruction does, try to guess what would adding the following line of code at line 15 and the ",(0,r.yg)("inlineCode",{parentName:"p"},"mystery_label")," label at the line(of the current file, before adding the instruction) 53 would make the program do."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-assembly"},"jnc mystery_label\n")),(0,r.yg)("p",null,"Moving on, we can see that the ",(0,r.yg)("inlineCode",{parentName:"p"},"0")," value is set to the ",(0,r.yg)("inlineCode",{parentName:"p"},"eax")," register using the ",(0,r.yg)("inlineCode",{parentName:"p"},"mov")," instruction.\nCan you give example of another two ways of setting the value in ",(0,r.yg)("inlineCode",{parentName:"p"},"eax")," to ",(0,r.yg)("inlineCode",{parentName:"p"},"0")," without using ",(0,r.yg)("inlineCode",{parentName:"p"},"mov")," ?"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"HINT"),": Think about the ",(0,r.yg)("a",{parentName:"p",href:"/hardware-software-interface/Lab%205%20-%20Introduction%20to%20Assembly%20Language/x86%20Architecture%20Family/Reading/#arithmetic-and-logic-instructions"},"logical operators"),".")),(0,r.yg)("p",null,"Next, by using the ",(0,r.yg)("inlineCode",{parentName:"p"},"test")," instruction we can set the ",(0,r.yg)("inlineCode",{parentName:"p"},"flags")," based on the output of the ",(0,r.yg)("inlineCode",{parentName:"p"},"logical and")," between ",(0,r.yg)("inlineCode",{parentName:"p"},"eax")," and itself."),(0,r.yg)("p",null,"After resetting the flags, we store ",(0,r.yg)("inlineCode",{parentName:"p"},"0xffffffff")," in the ",(0,r.yg)("inlineCode",{parentName:"p"},"ebx")," register(which is actually the largest number it can store before setting the carry flag) and then use the ",(0,r.yg)("inlineCode",{parentName:"p"},"test")," instruction yet again.\nSimilarly, what do you think adding the following line of code after the ",(0,r.yg)("inlineCode",{parentName:"p"},"test")," instruction would produce ?"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-assembly"},"jnz mystery_label\n")),(0,r.yg)("p",null,"We reset the flags once again and now we take a look at working with the smaller portions of the ",(0,r.yg)("inlineCode",{parentName:"p"},"eax")," register.\nCan you guess the output of the following command, put right under the ",(0,r.yg)("inlineCode",{parentName:"p"},"add al, bl")," instruction ?\nWhat about the flags ?\nWhich flag has been set ?"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-assembly"},"PRINTF32 `%d\\n\\x0`, eax\n")),(0,r.yg)("p",null,"Similarly, try to answer the same questions from above, but considering the next portions of the code."),(0,r.yg)("p",null,"After thoroughly inspecting this example, you should have a vague idea about how setting the flags works."))}g.isMDXComponent=!0},7509:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/eflags-representation-2092cff4e0c5323ca3736ef4a4ab22b4.svg"}}]);